#!/usr/bin/env python

import twitter
import ConfigParser
import os, sys
import argparse
import re

import urlparse
import oauth2 as oauth

parser = argparse.ArgumentParser(description = "Console Twitter Client")
parser.add_argument("--all", "-a", help = "Show all timeline, not only updates", const = True, nargs = "?", default = False)
parser.add_argument("--config", help = "Path to config file", default="~/.twrc")
parser.add_argument("--replies", "-r", help = "Show replies", const = True, nargs = "?", default = False)
parser.add_argument("--thread", "-t", help = "Show all tweets in thread with given id")
parser.add_argument("--post", "-p", help = "Post status")
parser.add_argument("--user", "-u", help = "Show user's timeline")
args = parser.parse_args()

if args.post:
	if len(args.post) > 140:
		raise Exception("status is too long ({} chars)".format(len(args.post)))

config_file = args.config
config_file_path = os.path.expanduser(config_file)

config = ConfigParser.SafeConfigParser()
config.read(config_file_path)

request_token_url = 'https://twitter.com/oauth/request_token?oauth_callback=oob'
access_token_url = 'https://twitter.com/oauth/access_token'
authorize_url = 'https://twitter.com/oauth/authorize'

consumer_key = "Mbyq8DHvbVKdCZKvCLlA"
consumer_secret = "Q1FXTm5SRjlGRTN0ZzU4Rlkwc1RwVjZqYVVhVllRRks2ZTg0Tmo5OTJR".decode("base64")

if not config.has_section("account"):
	config.add_section("account")

if not config.has_section("timeline"):
	config.add_section("timeline")

def save_config():
	config.write(open(config_file_path, "w"))

def get_username():
	try:
		username = config.get("account", "username")
	except:
		username = raw_input("Please, enter your twitter username: ").strip()
		print "Ok, logging in as \"{0}\"".format(username)

	config.set("account", "username", username)
	save_config()
	return username

re_nick = re.compile(r'@\w+')
re_tag = re.compile(r'#\w+')

def format_status(status):
	reset = u"\033[0m"

	id = u"{0}".format(status.id)

	reply_to = status.in_reply_to_screen_name
	reply_to = u"\033[33m-> {0}".format(reply_to) if reply_to else str()

	username = u"\033[31m{0}".format(status.user.name)
	text = re_nick.sub(lambda m: u"\033[36m" + m.group(0) + reset, status.text)
	text = re_tag.sub(lambda m: u"\033[32m" + m.group(0) + reset, text)
	text = u"\033[0m{0}".format(text)

	return u" ".join((id, username, text, reply_to, reset))

def _show_timeline(timeline, last_id):
	for s in timeline:
		if s.id == last_id:
			break
		print format_status(s)

def show_timeline(user, name, incremental):
	try:
		last_id = config.getint("timeline", "%s-id" %name) if incremental else 0
	except:
		last_id = 0

	if name == "home":
		timeline = api.GetHomeTimeline()
	else:
		timeline = {"replies": api.GetReplies, "user": api.GetUserTimeline }[name](user.id)
	if not timeline:
		return

	_show_timeline(timeline, last_id)

	last_id = timeline[0].id
	config.set("timeline", "%s-id" %name, str(last_id))
	save_config()


try:
	username = get_username()
	try:
		key = config.get("account", "access_token_key")
		secret = config.get("account", "access_token_secret").decode("base64")
	except:
		print "Obtaining OAuth token..."
		consumer = oauth.Consumer(consumer_key, consumer_secret)
		client = oauth.Client(consumer)
		resp, content = client.request(request_token_url, "GET")

		if resp['status'] != '200':
			raise Exception("invalid response")

		request_token = dict(urlparse.parse_qsl(content))
		print "Go to the following link in your browser:"
		print "%s?oauth_token=%s" % (authorize_url, request_token['oauth_token'])
		print "Then, authorize application and enter the PIN"
		print
		oauth_verifier = raw_input('PIN: ')
		token = oauth.Token(request_token['oauth_token'], request_token['oauth_token_secret'])
		token.set_verifier(oauth_verifier)
		client = oauth.Client(consumer, token)
		print "getting access tokens..."
		resp, content = client.request(access_token_url, "POST")
		access_token = dict(urlparse.parse_qsl(content))
		config.set("account", "access_token_key", access_token["oauth_token"])
		config.set("account", "access_token_secret", access_token["oauth_token_secret"].encode("base64"))
		print "OK!"
		save_config()

	api = twitter.Api(
		consumer_key = consumer_key,
		consumer_secret = consumer_secret,
		access_token_key = config.get("account", "access_token_key"),
		access_token_secret = config.get("account", "access_token_secret").decode("base64")
	)

	user = api.VerifyCredentials()

	if args.post:
		reply_to = None
		if args.thread:
			reply_to = args.thread
		api.PostUpdate(args.post, reply_to)
	elif args.thread:
		id = args.thread
		while id > 0:
			status = api.GetStatus(id)
			print format_status(status)
			id = status.in_reply_to_status_id
	elif args.replies:
		show_timeline(user, "replies", not args.all)
	elif args.user:
		u = api.GetUser(args.user)
		print u.name, u" ({0})".format(u.description) if u.description else ""
		show_timeline(u, "user", not args.all)
	else:
		show_timeline(user, "home", not args.all)

except KeyboardInterrupt:
	pass
